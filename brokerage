import java.lang.reflect.*;
import java.util.*;


/**
 * Represents a brokerage. 
 *
 * @author Eileen Yang
 * @version 3/15/18
 * @author Period: 2
 * @author Assignment: JMCh19_SafeTrade
 *
 * @author Sources: Albert, Sophia
 */
public class Brokerage implements Login {
    private Map<String, Trader> traders;
    private Set<Trader> loggedTraders;
    private StockExchange exchange;

    /**
     * Constructs new brokerage affiliated with a given stock exchange.
     * Initializes the map of traders to an empty map (a TreeMap), keyed by
     * trader's name; initializes the set of active (logged-in) traders to an
     * empty set (a TreeSet).
     * 
     * @param exchange
     *            a stock exchange
     */
    public Brokerage(StockExchange exchange) {
        traders = new TreeMap<String, Trader>();
        loggedTraders = new TreeSet<Trader>();
        this.exchange = exchange;
    }

    /**
     * Tries to register a new trader with a given screen name and password. If
     * successful, creates a Trader object for this trader and adds this trader
     * to the map of all traders (using the screen name as the key).
     * 
     * 0 if successful, or an error code (a negative integer) if failed: -1 --
     * invalid screen name (must be 4-10 chars) -2 -- invalid password (must be
     * 2-10 chars) -3 -- the screen name is already taken.
     * 
     * @param name
     *            the screen name of the trader
     * @param password
     *            the password for the trader
     */
    public int addUser(java.lang.String name, java.lang.String password) {
        if (name.length() < 4 || name.length() > 10) {
            return -1;
        }
        else if (password.length() < 2 || password.length() > 10) {
            return -2;
        }
        else if (traders.containsKey(name) == true) {
            return -3;
        }
        else {
            Trader object = new Trader(this, name, password);

            traders.put(name, object);
            return 0;
        }
    }

    /**
     * Requests a quote for a given stock from the stock exachange and passes it
     * along to the trader by calling trader's receiveMessage method.
     * 
     * @param symbol
     *            the stock symbol
     * @param trader
     *            the trader who requested a quote
     */
    public void getQuote(java.lang.String symbol, Trader trader)
    {
        trader.receiveMessage(symbol);
    }

    /**
     * Tries to login a trader with a given screen name and password. If no
     * messages are waiting for the trader, sends a "Welcome to SafeTrade!"
     * message to the trader. Opens a dialog window for the trader by calling
     * trader's openWindow() method. Adds the trader to the set of all logged-in
     * traders.
     * 
     * 0 if successful, or an error code (a negative integer) if failed: -1 --
     * screen name not found -2 -- invalid password -3 -- user is already logged
     * in.
     * 
     * @param name
     *            the screen name of the trader
     * @param password
     *            the password for the trader
     */
    public int login(java.lang.String name, java.lang.String password) {
        if (traders.containsKey(name) == false) {
            return -1;
        }
        else if (!(traders.get(name).getPassword()).equals(password)) {
            return -2;
        }
        else if (loggedTraders.contains(name) == true) {
            return -3;
        }
        else {
            Trader trade = new Trader(this, name, password);

            loggedTraders.add(trade);

            trade.openWindow();
            if (trade.hasMessages() == false) {
                trade.receiveMessage("Welcome to SafeTrade!");
            }
            return 0;
        }
    }

    /**
     * Removes a specified trader from the set of logged-in traders.
     * 
     * @param trader
     *            the trader that logs out;
     */
    public void logout(Trader trader) {
        loggedTraders.remove(trader);
    }

    /**
     * Places an order at the stock exchange.
     * 
     * @param order
     *            an order to be placed at the stock exchange
     */
    public void placeOrder(TradeOrder order) {
        exchange.placeOrder(order);
    }

    //
    // The following are for test purposes only
    //
    protected Map<String, Trader> getTraders() {
        return traders;
    }

    protected Set<Trader> getLoggedTraders() {
        return loggedTraders;
    }

    protected StockExchange getExchange() {
        return exchange;
    }

    /**
     * <p>
     * A generic toString implementation that uses reflection to print names and
     * values of all fields <em>declared in this class</em>. Note that
     * superclass fields are left out of this implementation.
     * </p>
     * 
     * @return a string representation of this Brokerage.
     */
    public String toString() {
        String str = this.getClass().getName() + "[";
        String separator = "";

        Field[] fields = this.getClass().getDeclaredFields();

        for (Field field : fields) {
            try {
                str += separator + field.getType().getName() + " "
                        + field.getName() + ":" + field.get(this);
            }
            catch (IllegalAccessException ex) {
                System.out.println(ex);
            }

            separator = ", ";
        }

        return str + "]";
    }
}
